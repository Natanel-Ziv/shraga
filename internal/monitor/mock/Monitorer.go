// Code generated by mockery v2.47.0. DO NOT EDIT.

package mock

import (
	context "context"
	monitor "shraga/internal/monitor"

	mock "github.com/stretchr/testify/mock"
)

// Monitorer is an autogenerated mock type for the Monitorer type
type Monitorer struct {
	mock.Mock
}

// GetBase provides a mock function with given fields:
func (_m *Monitorer) GetBase() *monitor.BaseMonitor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBase")
	}

	var r0 *monitor.BaseMonitor
	if rf, ok := ret.Get(0).(func() *monitor.BaseMonitor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*monitor.BaseMonitor)
		}
	}

	return r0
}

// GetType provides a mock function with given fields:
func (_m *Monitorer) GetType() monitor.MonitorType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 monitor.MonitorType
	if rf, ok := ret.Get(0).(func() monitor.MonitorType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(monitor.MonitorType)
	}

	return r0
}

// IsEnabled provides a mock function with given fields:
func (_m *Monitorer) IsEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Monitor provides a mock function with given fields: _a0
func (_m *Monitorer) Monitor(_a0 context.Context) monitor.MonitorResponser {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Monitor")
	}

	var r0 monitor.MonitorResponser
	if rf, ok := ret.Get(0).(func(context.Context) monitor.MonitorResponser); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(monitor.MonitorResponser)
		}
	}

	return r0
}

// NewMonitorer creates a new instance of Monitorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMonitorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Monitorer {
	mock := &Monitorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
